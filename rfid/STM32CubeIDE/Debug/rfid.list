
rfid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026ac  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002834  08002834  00003834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002844  08002844  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002844  08002844  00003844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800284c  0800284c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800284c  0800284c  0000384c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002850  08002850  00003850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002854  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000094  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a0  200000a0  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007298  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017fa  00000000  00000000  0000b2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f8  00000000  00000000  0000cad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000052d  00000000  00000000  0000d1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002049a  00000000  00000000  0000d6f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008976  00000000  00000000  0002db8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2517  00000000  00000000  00036505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f8a1c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b10  00000000  00000000  000f8a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  000fa570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800281c 	.word	0x0800281c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800281c 	.word	0x0800281c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <RC522_SPI_Transfer>:
extern SPI_HandleTypeDef hspi1;
extern uint8_t spi_receive;
#define MAX_LEN 16


void RC522_SPI_Transfer(uint8_t data){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &data, 1, 50);
 80004c2:	1df9      	adds	r1, r7, #7
 80004c4:	2332      	movs	r3, #50	@ 0x32
 80004c6:	2201      	movs	r2, #1
 80004c8:	4803      	ldr	r0, [pc, #12]	@ (80004d8 <RC522_SPI_Transfer+0x20>)
 80004ca:	f001 fca4 	bl	8001e16 <HAL_SPI_Transmit>
}
 80004ce:	bf00      	nop
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	20000028 	.word	0x20000028

080004dc <Write_MFRC522>:
//	return rx_data;
//
//}

void Write_MFRC522(uint8_t addr, uint8_t val)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	460a      	mov	r2, r1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	4613      	mov	r3, r2
 80004ea:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	2110      	movs	r1, #16
 80004f0:	4809      	ldr	r0, [pc, #36]	@ (8000518 <Write_MFRC522+0x3c>)
 80004f2:	f000 ff89 	bl	8001408 <HAL_GPIO_WritePin>
  	RC522_SPI_Transfer(addr);
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff ffdd 	bl	80004b8 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80004fe:	79bb      	ldrb	r3, [r7, #6]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff ffd9 	bl	80004b8 <RC522_SPI_Transfer>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2110      	movs	r1, #16
 800050a:	4803      	ldr	r0, [pc, #12]	@ (8000518 <Write_MFRC522+0x3c>)
 800050c:	f000 ff7c 	bl	8001408 <HAL_GPIO_WritePin>
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40020000 	.word	0x40020000

0800051c <Read_MFRC522>:

uint8_t Read_MFRC522(uint8_t addr) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af02      	add	r7, sp, #8
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]

    uint8_t txBuffer[2];
    uint8_t rxBuffer[2];

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2110      	movs	r1, #16
 800052a:	4810      	ldr	r0, [pc, #64]	@ (800056c <Read_MFRC522+0x50>)
 800052c:	f000 ff6c 	bl	8001408 <HAL_GPIO_WritePin>

    txBuffer[0] = addr | 0x80;
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000536:	b2db      	uxtb	r3, r3
 8000538:	733b      	strb	r3, [r7, #12]
    //txBuffer[1] = 0x00;

    HAL_SPI_TransmitReceive(&hspi1, txBuffer, rxBuffer, 2, HAL_MAX_DELAY);
 800053a:	f107 0208 	add.w	r2, r7, #8
 800053e:	f107 010c 	add.w	r1, r7, #12
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2302      	movs	r3, #2
 800054a:	4809      	ldr	r0, [pc, #36]	@ (8000570 <Read_MFRC522+0x54>)
 800054c:	f001 fda6 	bl	800209c <HAL_SPI_TransmitReceive>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2110      	movs	r1, #16
 8000554:	4805      	ldr	r0, [pc, #20]	@ (800056c <Read_MFRC522+0x50>)
 8000556:	f000 ff57 	bl	8001408 <HAL_GPIO_WritePin>

    spi_receive= rxBuffer[1];
 800055a:	7a7a      	ldrb	r2, [r7, #9]
 800055c:	4b05      	ldr	r3, [pc, #20]	@ (8000574 <Read_MFRC522+0x58>)
 800055e:	701a      	strb	r2, [r3, #0]

    return spi_receive;
 8000560:	4b04      	ldr	r3, [pc, #16]	@ (8000574 <Read_MFRC522+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
}
 8000564:	4618      	mov	r0, r3
 8000566:	3710      	adds	r7, #16
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40020000 	.word	0x40020000
 8000570:	20000028 	.word	0x20000028
 8000574:	20000099 	.word	0x20000099

08000578 <SetBitMask>:

void SetBitMask(uint8_t reg, uint8_t mask)  
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	460a      	mov	r2, r1
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	4613      	mov	r3, r2
 8000586:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ffc6 	bl	800051c <Read_MFRC522>
 8000590:	4603      	mov	r3, r0
 8000592:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000594:	7bfa      	ldrb	r2, [r7, #15]
 8000596:	79bb      	ldrb	r3, [r7, #6]
 8000598:	4313      	orrs	r3, r2
 800059a:	b2da      	uxtb	r2, r3
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	4611      	mov	r1, r2
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff ff9b 	bl	80004dc <Write_MFRC522>
}
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <AntennaOn>:

void AntennaOn(void)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	af00      	add	r7, sp, #0
	

Read_MFRC522(TxControlReg);
 80005b2:	2014      	movs	r0, #20
 80005b4:	f7ff ffb2 	bl	800051c <Read_MFRC522>
//	if (!(temp & 0x03))
//	{
//		SetBitMask(TxControlReg, 0x03);
//	}
	SetBitMask(TxControlReg, 0x03);
 80005b8:	2103      	movs	r1, #3
 80005ba:	2014      	movs	r0, #20
 80005bc:	f7ff ffdc 	bl	8000578 <SetBitMask>
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <MFRC522_Init>:
void MFRC522_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2110      	movs	r1, #16
 80005cc:	481d      	ldr	r0, [pc, #116]	@ (8000644 <MFRC522_Init+0x80>)
 80005ce:	f000 ff1b 	bl	8001408 <HAL_GPIO_WritePin>
	Write_MFRC522(TxModeReg, 0x00);
 80005d2:	2100      	movs	r1, #0
 80005d4:	2012      	movs	r0, #18
 80005d6:	f7ff ff81 	bl	80004dc <Write_MFRC522>
	Write_MFRC522(RxModeReg, 0x00);
 80005da:	2100      	movs	r1, #0
 80005dc:	2013      	movs	r0, #19
 80005de:	f7ff ff7d 	bl	80004dc <Write_MFRC522>
	// Reset ModWidthReg
	Write_MFRC522(ModWidthReg, 0x26);
 80005e2:	2126      	movs	r1, #38	@ 0x26
 80005e4:	2024      	movs	r0, #36	@ 0x24
 80005e6:	f7ff ff79 	bl	80004dc <Write_MFRC522>
	Write_MFRC522(0x01, 0x0F); //Soft Reset
 80005ea:	210f      	movs	r1, #15
 80005ec:	2001      	movs	r0, #1
 80005ee:	f7ff ff75 	bl	80004dc <Write_MFRC522>
	Read_MFRC522(0x01);
 80005f2:	2001      	movs	r0, #1
 80005f4:	f7ff ff92 	bl	800051c <Read_MFRC522>
	Write_MFRC522(TModeReg, 0x8D);		//auto=1; f(Timer) = 6.78MHz/TPreScaler
 80005f8:	218d      	movs	r1, #141	@ 0x8d
 80005fa:	202a      	movs	r0, #42	@ 0x2a
 80005fc:	f7ff ff6e 	bl	80004dc <Write_MFRC522>
	Read_MFRC522(TModeReg);
 8000600:	202a      	movs	r0, #42	@ 0x2a
 8000602:	f7ff ff8b 	bl	800051c <Read_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000606:	213e      	movs	r1, #62	@ 0x3e
 8000608:	202b      	movs	r0, #43	@ 0x2b
 800060a:	f7ff ff67 	bl	80004dc <Write_MFRC522>
	Read_MFRC522(TPrescalerReg);
 800060e:	202b      	movs	r0, #43	@ 0x2b
 8000610:	f7ff ff84 	bl	800051c <Read_MFRC522>
	Write_MFRC522(TReloadRegL, 30);  
 8000614:	211e      	movs	r1, #30
 8000616:	202d      	movs	r0, #45	@ 0x2d
 8000618:	f7ff ff60 	bl	80004dc <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 800061c:	2100      	movs	r1, #0
 800061e:	202c      	movs	r0, #44	@ 0x2c
 8000620:	f7ff ff5c 	bl	80004dc <Write_MFRC522>
	Write_MFRC522(0x26, 0x70);	
 8000624:	2170      	movs	r1, #112	@ 0x70
 8000626:	2026      	movs	r0, #38	@ 0x26
 8000628:	f7ff ff58 	bl	80004dc <Write_MFRC522>
	Write_MFRC522(TxAutoReg, 0x40);		//100%ASK
 800062c:	2140      	movs	r1, #64	@ 0x40
 800062e:	2015      	movs	r0, #21
 8000630:	f7ff ff54 	bl	80004dc <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		//CRC Original value 0x6363	???
 8000634:	213d      	movs	r1, #61	@ 0x3d
 8000636:	2011      	movs	r0, #17
 8000638:	f7ff ff50 	bl	80004dc <Write_MFRC522>
	AntennaOn();		//Mo Anten
 800063c:	f7ff ffb7 	bl	80005ae <AntennaOn>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40020000 	.word	0x40020000

08000648 <ClearBitMask>:

void ClearBitMask(uint8_t reg, uint8_t mask)  
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff5e 	bl	800051c <Read_MFRC522>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000664:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000668:	43db      	mvns	r3, r3
 800066a:	b25a      	sxtb	r2, r3
 800066c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000670:	4013      	ands	r3, r2
 8000672:	b25b      	sxtb	r3, r3
 8000674:	b2da      	uxtb	r2, r3
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	4611      	mov	r1, r2
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ff2e 	bl	80004dc <Write_MFRC522>
} 
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint *backLen)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b089      	sub	sp, #36	@ 0x24
 800068c:	af00      	add	r7, sp, #0
 800068e:	60b9      	str	r1, [r7, #8]
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	4603      	mov	r3, r0
 8000694:	73fb      	strb	r3, [r7, #15]
 8000696:	4613      	mov	r3, r2
 8000698:	73bb      	strb	r3, [r7, #14]
    uint8_t status = MI_ERR;
 800069a:	2302      	movs	r3, #2
 800069c:	77fb      	strb	r3, [r7, #31]
    uint8_t irqEn = 0x00;
 800069e:	2300      	movs	r3, #0
 80006a0:	77bb      	strb	r3, [r7, #30]
    uint8_t waitIRq = 0x00;
 80006a2:	2300      	movs	r3, #0
 80006a4:	777b      	strb	r3, [r7, #29]
    uint8_t lastBits;
    uint8_t n;
    uint i;

    switch (command)
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	2b0c      	cmp	r3, #12
 80006aa:	d006      	beq.n	80006ba <MFRC522_ToCard+0x32>
 80006ac:	2b0e      	cmp	r3, #14
 80006ae:	d109      	bne.n	80006c4 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		//Acknowledging the liver
		{
			irqEn = 0x12;
 80006b0:	2312      	movs	r3, #18
 80006b2:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 80006b4:	2310      	movs	r3, #16
 80006b6:	777b      	strb	r3, [r7, #29]
			break;
 80006b8:	e005      	b.n	80006c6 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// FIFO data collection
		{
			irqEn = 0x77;
 80006ba:	2377      	movs	r3, #119	@ 0x77
 80006bc:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 80006be:	2330      	movs	r3, #48	@ 0x30
 80006c0:	777b      	strb	r3, [r7, #29]
			break;
 80006c2:	e000      	b.n	80006c6 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 80006c4:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	//Yeu cau ngat
 80006c6:	7fbb      	ldrb	r3, [r7, #30]
 80006c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4619      	mov	r1, r3
 80006d0:	2002      	movs	r0, #2
 80006d2:	f7ff ff03 	bl	80004dc <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			//Clear all the bits
 80006d6:	2180      	movs	r1, #128	@ 0x80
 80006d8:	2004      	movs	r0, #4
 80006da:	f7ff ffb5 	bl	8000648 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//FlushBuffer=1, FIFO
 80006de:	2180      	movs	r1, #128	@ 0x80
 80006e0:	200a      	movs	r0, #10
 80006e2:	f7ff ff49 	bl	8000578 <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	//NO action; Huy bo lenh hien hanh	???
 80006e6:	2100      	movs	r1, #0
 80006e8:	2001      	movs	r0, #1
 80006ea:	f7ff fef7 	bl	80004dc <Write_MFRC522>

	// Record in FIFO
    for (i=0; i<sendLen; i++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
 80006f2:	e00a      	b.n	800070a <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 80006f4:	68ba      	ldr	r2, [r7, #8]
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	4413      	add	r3, r2
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4619      	mov	r1, r3
 80006fe:	2009      	movs	r0, #9
 8000700:	f7ff feec 	bl	80004dc <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	3301      	adds	r3, #1
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	7bbb      	ldrb	r3, [r7, #14]
 800070c:	69ba      	ldr	r2, [r7, #24]
 800070e:	429a      	cmp	r2, r3
 8000710:	d3f0      	bcc.n	80006f4 <MFRC522_ToCard+0x6c>
	}

	//chay
	Write_MFRC522(CommandReg, command);
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	4619      	mov	r1, r3
 8000716:	2001      	movs	r0, #1
 8000718:	f7ff fee0 	bl	80004dc <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	2b0c      	cmp	r3, #12
 8000720:	d103      	bne.n	800072a <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		//StartSend=1,transmission of data starts  
 8000722:	2180      	movs	r1, #128	@ 0x80
 8000724:	200d      	movs	r0, #13
 8000726:	f7ff ff27 	bl	8000578 <SetBitMask>
	}   
    
	//The team is allowed to be stored
	i = 2000;	//i tuy thuoc tan so thach anh, thoi gian toi da cho the M1 la 25ms
 800072a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800072e:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8000730:	2004      	movs	r0, #4
 8000732:	f7ff fef3 	bl	800051c <Read_MFRC522>
 8000736:	4603      	mov	r3, r0
 8000738:	773b      	strb	r3, [r7, #28]
        i--;
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	3b01      	subs	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d00a      	beq.n	800075c <MFRC522_ToCard+0xd4>
 8000746:	7f3b      	ldrb	r3, [r7, #28]
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	2b00      	cmp	r3, #0
 800074e:	d105      	bne.n	800075c <MFRC522_ToCard+0xd4>
 8000750:	7f3a      	ldrb	r2, [r7, #28]
 8000752:	7f7b      	ldrb	r3, [r7, #29]
 8000754:	4013      	ands	r3, r2
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d0e9      	beq.n	8000730 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 800075c:	2180      	movs	r1, #128	@ 0x80
 800075e:	200d      	movs	r0, #13
 8000760:	f7ff ff72 	bl	8000648 <ClearBitMask>
	
    if (i != 0)
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d052      	beq.n	8000810 <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 800076a:	2006      	movs	r0, #6
 800076c:	f7ff fed6 	bl	800051c <Read_MFRC522>
 8000770:	4603      	mov	r3, r0
 8000772:	f003 031b 	and.w	r3, r3, #27
 8000776:	2b00      	cmp	r3, #0
 8000778:	d148      	bne.n	800080c <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 800077a:	2300      	movs	r3, #0
 800077c:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 800077e:	7f3a      	ldrb	r2, [r7, #28]
 8000780:	7fbb      	ldrb	r3, [r7, #30]
 8000782:	4013      	ands	r3, r2
 8000784:	b2db      	uxtb	r3, r3
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;			//??   
 800078e:	2301      	movs	r3, #1
 8000790:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	2b0c      	cmp	r3, #12
 8000796:	d13b      	bne.n	8000810 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8000798:	200a      	movs	r0, #10
 800079a:	f7ff febf 	bl	800051c <Read_MFRC522>
 800079e:	4603      	mov	r3, r0
 80007a0:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 80007a2:	200c      	movs	r0, #12
 80007a4:	f7ff feba 	bl	800051c <Read_MFRC522>
 80007a8:	4603      	mov	r3, r0
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 80007b0:	7dfb      	ldrb	r3, [r7, #23]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d008      	beq.n	80007c8 <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 80007b6:	7f3b      	ldrb	r3, [r7, #28]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	00da      	lsls	r2, r3, #3
 80007bc:	7dfb      	ldrb	r3, [r7, #23]
 80007be:	4413      	add	r3, r2
 80007c0:	461a      	mov	r2, r3
 80007c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	e004      	b.n	80007d2 <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 80007c8:	7f3b      	ldrb	r3, [r7, #28]
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	461a      	mov	r2, r3
 80007ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007d0:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 80007d2:	7f3b      	ldrb	r3, [r7, #28]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d101      	bne.n	80007dc <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 80007d8:	2301      	movs	r3, #1
 80007da:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 80007dc:	7f3b      	ldrb	r3, [r7, #28]
 80007de:	2b10      	cmp	r3, #16
 80007e0:	d901      	bls.n	80007e6 <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 80007e2:	2310      	movs	r3, #16
 80007e4:	773b      	strb	r3, [r7, #28]
				}
				
				//FIFO doc in the received data
                for (i=0; i<n; i++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
 80007ea:	e00a      	b.n	8000802 <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	18d4      	adds	r4, r2, r3
 80007f2:	2009      	movs	r0, #9
 80007f4:	f7ff fe92 	bl	800051c <Read_MFRC522>
 80007f8:	4603      	mov	r3, r0
 80007fa:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	3301      	adds	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
 8000802:	7f3b      	ldrb	r3, [r7, #28]
 8000804:	69ba      	ldr	r2, [r7, #24]
 8000806:	429a      	cmp	r2, r3
 8000808:	d3f0      	bcc.n	80007ec <MFRC522_ToCard+0x164>
 800080a:	e001      	b.n	8000810 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 800080c:	2302      	movs	r3, #2
 800080e:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 8000810:	7ffb      	ldrb	r3, [r7, #31]
}
 8000812:	4618      	mov	r0, r3
 8000814:	3724      	adds	r7, #36	@ 0x24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd90      	pop	{r4, r7, pc}

0800081a <MFRC522_Request>:


uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b086      	sub	sp, #24
 800081e:	af02      	add	r7, sp, #8
 8000820:	4603      	mov	r3, r0
 8000822:	6039      	str	r1, [r7, #0]
 8000824:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint backBits;			//The bits are manipulated

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8000826:	2107      	movs	r1, #7
 8000828:	200d      	movs	r0, #13
 800082a:	f7ff fe57 	bl	80004dc <Write_MFRC522>
	
	TagType[0] = reqMode;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	79fa      	ldrb	r2, [r7, #7]
 8000832:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000834:	f107 0308 	add.w	r3, r7, #8
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	2201      	movs	r2, #1
 800083e:	6839      	ldr	r1, [r7, #0]
 8000840:	200c      	movs	r0, #12
 8000842:	f7ff ff21 	bl	8000688 <MFRC522_ToCard>
 8000846:	4603      	mov	r3, r0
 8000848:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d102      	bne.n	8000856 <MFRC522_Request+0x3c>
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2b10      	cmp	r3, #16
 8000854:	d001      	beq.n	800085a <MFRC522_Request+0x40>
	{    
		status = MI_ERR;
 8000856:	2302      	movs	r3, #2
 8000858:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 800085a:	7bfb      	ldrb	r3, [r7, #15]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t *serNum)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af02      	add	r7, sp, #8
 800086a:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
 800086c:	2300      	movs	r3, #0
 800086e:	737b      	strb	r3, [r7, #13]
    uint unLen;
    

    //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
    //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000870:	2100      	movs	r1, #0
 8000872:	200d      	movs	r0, #13
 8000874:	f7ff fe32 	bl	80004dc <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2293      	movs	r2, #147	@ 0x93
 800087c:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3301      	adds	r3, #1
 8000882:	2220      	movs	r2, #32
 8000884:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2202      	movs	r2, #2
 8000890:	6879      	ldr	r1, [r7, #4]
 8000892:	200c      	movs	r0, #12
 8000894:	f7ff fef8 	bl	8000688 <MFRC522_ToCard>
 8000898:	4603      	mov	r3, r0
 800089a:	73fb      	strb	r3, [r7, #15]

    if (status == MI_ERR)
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d118      	bne.n	80008d4 <MFRC522_Anticoll+0x70>
	{
		//Check the serial number
		for (i=0; i<4; i++)
 80008a2:	2300      	movs	r3, #0
 80008a4:	73bb      	strb	r3, [r7, #14]
 80008a6:	e009      	b.n	80008bc <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 80008a8:	7bbb      	ldrb	r3, [r7, #14]
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	781a      	ldrb	r2, [r3, #0]
 80008b0:	7b7b      	ldrb	r3, [r7, #13]
 80008b2:	4053      	eors	r3, r2
 80008b4:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 80008b6:	7bbb      	ldrb	r3, [r7, #14]
 80008b8:	3301      	adds	r3, #1
 80008ba:	73bb      	strb	r3, [r7, #14]
 80008bc:	7bbb      	ldrb	r3, [r7, #14]
 80008be:	2b03      	cmp	r3, #3
 80008c0:	d9f2      	bls.n	80008a8 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 80008c2:	7bbb      	ldrb	r3, [r7, #14]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	7b7a      	ldrb	r2, [r7, #13]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d001      	beq.n	80008d4 <MFRC522_Anticoll+0x70>
		{   
			status = MI_OK;    
 80008d0:	2300      	movs	r3, #0
 80008d2:	73fb      	strb	r3, [r7, #15]
		}
    }

    //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

    return status;
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
} 
 80008d6:	4618      	mov	r0, r3
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e4:	f000 fa4e 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e8:	f000 f824 	bl	8000934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ec:	f000 f8c2 	bl	8000a74 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008f0:	f000 f88a 	bl	8000a08 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 80008f4:	f7ff fe66 	bl	80005c4 <MFRC522_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		status = MFRC522_Request(PICC_REQIDL, str);	//MFRC522_Request(0x26, str)
 80008f8:	490b      	ldr	r1, [pc, #44]	@ (8000928 <main+0x48>)
 80008fa:	2026      	movs	r0, #38	@ 0x26
 80008fc:	f7ff ff8d 	bl	800081a <MFRC522_Request>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	4b09      	ldr	r3, [pc, #36]	@ (800092c <main+0x4c>)
 8000906:	701a      	strb	r2, [r3, #0]
		status = MFRC522_Anticoll(str);//Take a collision, look up 5 bytes
 8000908:	4807      	ldr	r0, [pc, #28]	@ (8000928 <main+0x48>)
 800090a:	f7ff ffab 	bl	8000864 <MFRC522_Anticoll>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <main+0x4c>)
 8000914:	701a      	strb	r2, [r3, #0]
		memcpy(serNum, str, 5);
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <main+0x50>)
 8000918:	4a03      	ldr	r2, [pc, #12]	@ (8000928 <main+0x48>)
 800091a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800091e:	6018      	str	r0, [r3, #0]
 8000920:	3304      	adds	r3, #4
 8000922:	7019      	strb	r1, [r3, #0]
		status = MFRC522_Request(PICC_REQIDL, str);	//MFRC522_Request(0x26, str)
 8000924:	bf00      	nop
 8000926:	e7e7      	b.n	80008f8 <main+0x18>
 8000928:	20000084 	.word	0x20000084
 800092c:	20000080 	.word	0x20000080
 8000930:	20000094 	.word	0x20000094

08000934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b094      	sub	sp, #80	@ 0x50
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 0320 	add.w	r3, r7, #32
 800093e:	2230      	movs	r2, #48	@ 0x30
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f001 ff3e 	bl	80027c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	4b28      	ldr	r3, [pc, #160]	@ (8000a00 <SystemClock_Config+0xcc>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000960:	4a27      	ldr	r2, [pc, #156]	@ (8000a00 <SystemClock_Config+0xcc>)
 8000962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000966:	6413      	str	r3, [r2, #64]	@ 0x40
 8000968:	4b25      	ldr	r3, [pc, #148]	@ (8000a00 <SystemClock_Config+0xcc>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	4b22      	ldr	r3, [pc, #136]	@ (8000a04 <SystemClock_Config+0xd0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a21      	ldr	r2, [pc, #132]	@ (8000a04 <SystemClock_Config+0xd0>)
 800097e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000982:	6013      	str	r3, [r2, #0]
 8000984:	4b1f      	ldr	r3, [pc, #124]	@ (8000a04 <SystemClock_Config+0xd0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000990:	2301      	movs	r3, #1
 8000992:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000994:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	2302      	movs	r3, #2
 800099c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009a4:	2308      	movs	r3, #8
 80009a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009a8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009b2:	2307      	movs	r3, #7
 80009b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b6:	f107 0320 	add.w	r3, r7, #32
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 fd3e 	bl	800143c <HAL_RCC_OscConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009c6:	f000 f8df 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ca:	230f      	movs	r3, #15
 80009cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ce:	2302      	movs	r3, #2
 80009d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009e2:	f107 030c 	add.w	r3, r7, #12
 80009e6:	2105      	movs	r1, #5
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 ff9f 	bl	800192c <HAL_RCC_ClockConfig>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009f4:	f000 f8c8 	bl	8000b88 <Error_Handler>
  }
}
 80009f8:	bf00      	nop
 80009fa:	3750      	adds	r7, #80	@ 0x50
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40007000 	.word	0x40007000

08000a08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <MX_SPI1_Init+0x64>)
 8000a0e:	4a18      	ldr	r2, [pc, #96]	@ (8000a70 <MX_SPI1_Init+0x68>)
 8000a10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a12:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <MX_SPI1_Init+0x64>)
 8000a14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_SPI1_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <MX_SPI1_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_SPI1_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <MX_SPI1_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <MX_SPI1_Init+0x64>)
 8000a34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <MX_SPI1_Init+0x64>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a40:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <MX_SPI1_Init+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <MX_SPI1_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <MX_SPI1_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a52:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <MX_SPI1_Init+0x64>)
 8000a54:	220a      	movs	r2, #10
 8000a56:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <MX_SPI1_Init+0x64>)
 8000a5a:	f001 f953 	bl	8001d04 <HAL_SPI_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a64:	f000 f890 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000028 	.word	0x20000028
 8000a70:	40013000 	.word	0x40013000

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b3a      	ldr	r3, [pc, #232]	@ (8000b78 <MX_GPIO_Init+0x104>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a39      	ldr	r2, [pc, #228]	@ (8000b78 <MX_GPIO_Init+0x104>)
 8000a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b37      	ldr	r3, [pc, #220]	@ (8000b78 <MX_GPIO_Init+0x104>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b33      	ldr	r3, [pc, #204]	@ (8000b78 <MX_GPIO_Init+0x104>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a32      	ldr	r2, [pc, #200]	@ (8000b78 <MX_GPIO_Init+0x104>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b30      	ldr	r3, [pc, #192]	@ (8000b78 <MX_GPIO_Init+0x104>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	4b2c      	ldr	r3, [pc, #176]	@ (8000b78 <MX_GPIO_Init+0x104>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a2b      	ldr	r2, [pc, #172]	@ (8000b78 <MX_GPIO_Init+0x104>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b29      	ldr	r3, [pc, #164]	@ (8000b78 <MX_GPIO_Init+0x104>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b25      	ldr	r3, [pc, #148]	@ (8000b78 <MX_GPIO_Init+0x104>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a24      	ldr	r2, [pc, #144]	@ (8000b78 <MX_GPIO_Init+0x104>)
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b22      	ldr	r3, [pc, #136]	@ (8000b78 <MX_GPIO_Init+0x104>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2110      	movs	r1, #16
 8000afe:	481f      	ldr	r0, [pc, #124]	@ (8000b7c <MX_GPIO_Init+0x108>)
 8000b00:	f000 fc82 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2101      	movs	r1, #1
 8000b08:	481d      	ldr	r0, [pc, #116]	@ (8000b80 <MX_GPIO_Init+0x10c>)
 8000b0a:	f000 fc7d 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000b14:	481b      	ldr	r0, [pc, #108]	@ (8000b84 <MX_GPIO_Init+0x110>)
 8000b16:	f000 fc77 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_Pin */
  GPIO_InitStruct.Pin = SS_Pin;
 8000b1a:	2310      	movs	r3, #16
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4812      	ldr	r0, [pc, #72]	@ (8000b7c <MX_GPIO_Init+0x108>)
 8000b32:	f000 facd 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000b36:	2301      	movs	r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <MX_GPIO_Init+0x10c>)
 8000b4e:	f000 fabf 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000b52:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4806      	ldr	r0, [pc, #24]	@ (8000b84 <MX_GPIO_Init+0x110>)
 8000b6c:	f000 fab0 	bl	80010d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	@ 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	40020400 	.word	0x40020400
 8000b84:	40020c00 	.word	0x40020c00

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <Error_Handler+0x8>

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	@ (8000be0 <HAL_MspInit+0x4c>)
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000baa:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <HAL_MspInit+0x4c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	4b09      	ldr	r3, [pc, #36]	@ (8000be0 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbe:	4a08      	ldr	r2, [pc, #32]	@ (8000be0 <HAL_MspInit+0x4c>)
 8000bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bd2:	2007      	movs	r0, #7
 8000bd4:	f000 fa18 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800

08000be4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	@ 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a1d      	ldr	r2, [pc, #116]	@ (8000c78 <HAL_SPI_MspInit+0x94>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d133      	bne.n	8000c6e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <HAL_SPI_MspInit+0x98>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000c7c <HAL_SPI_MspInit+0x98>)
 8000c10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c16:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <HAL_SPI_MspInit+0x98>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <HAL_SPI_MspInit+0x98>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a14      	ldr	r2, [pc, #80]	@ (8000c7c <HAL_SPI_MspInit+0x98>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <HAL_SPI_MspInit+0x98>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000c3e:	23e0      	movs	r3, #224	@ 0xe0
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c4e:	2305      	movs	r3, #5
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4809      	ldr	r0, [pc, #36]	@ (8000c80 <HAL_SPI_MspInit+0x9c>)
 8000c5a:	f000 fa39 	bl	80010d0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	2023      	movs	r0, #35	@ 0x23
 8000c64:	f000 f9db 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000c68:	2023      	movs	r0, #35	@ 0x23
 8000c6a:	f000 f9f4 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c6e:	bf00      	nop
 8000c70:	3728      	adds	r7, #40	@ 0x28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40013000 	.word	0x40013000
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <NMI_Handler+0x4>

08000c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000cac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cda:	f000 f8a5 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000ce8:	4802      	ldr	r0, [pc, #8]	@ (8000cf4 <SPI1_IRQHandler+0x10>)
 8000cea:	f001 fb87 	bl	80023fc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000028 	.word	0x20000028

08000cf8 <HAL_SPI_ErrorCallback>:
    }
}


// Callback for error
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1) {
        // SPI error
    }
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d10:	f000 f826 	bl	8000d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d14:	480c      	ldr	r0, [pc, #48]	@ (8000d48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d16:	490d      	ldr	r1, [pc, #52]	@ (8000d4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d18:	4a0d      	ldr	r2, [pc, #52]	@ (8000d50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f001 fd4b 	bl	80027d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3e:	f7ff fdcf 	bl	80008e0 <main>
  bx  lr    
 8000d42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d50:	08002854 	.word	0x08002854
  ldr r2, =_sbss
 8000d54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d58:	200000a0 	.word	0x200000a0

08000d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC_IRQHandler>
	...

08000d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <SystemInit+0x20>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d6a:	4a05      	ldr	r2, [pc, #20]	@ (8000d80 <SystemInit+0x20>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d88:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc4 <HAL_Init+0x40>)
 8000d8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d94:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc4 <HAL_Init+0x40>)
 8000d9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a07      	ldr	r2, [pc, #28]	@ (8000dc4 <HAL_Init+0x40>)
 8000da6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f000 f92b 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f000 f808 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db8:	f7ff feec 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023c00 	.word	0x40023c00

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <HAL_InitTick+0x54>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <HAL_InitTick+0x58>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f943 	bl	8001072 <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f000 f90b 	bl	800101e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	@ (8000e24 <HAL_InitTick+0x5c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000004 	.word	0x20000004

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	@ (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	2000009c 	.word	0x2000009c

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	@ (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	2000009c 	.word	0x2000009c

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	@ (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	@ (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	@ (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	@ (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	@ (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	@ 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	@ 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f7ff ff8e 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff29 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff3e 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff8e 	bl	8000f5c <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5d 	bl	8000f08 <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff31 	bl	8000ecc <__NVIC_EnableIRQ>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffa2 	bl	8000fc4 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d004      	beq.n	80010a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2280      	movs	r2, #128	@ 0x80
 80010a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e00c      	b.n	80010c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2205      	movs	r2, #5
 80010ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f022 0201 	bic.w	r2, r2, #1
 80010be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	@ 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	e16b      	b.n	80013c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 815a 	bne.w	80013be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b01      	cmp	r3, #1
 8001114:	d005      	beq.n	8001122 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111e:	2b02      	cmp	r3, #2
 8001120:	d130      	bne.n	8001184 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	091b      	lsrs	r3, r3, #4
 800116e:	f003 0201 	and.w	r2, r3, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b03      	cmp	r3, #3
 800118e:	d017      	beq.n	80011c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d123      	bne.n	8001214 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	08da      	lsrs	r2, r3, #3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3208      	adds	r2, #8
 80011d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	691a      	ldr	r2, [r3, #16]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	08da      	lsrs	r2, r3, #3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3208      	adds	r2, #8
 800120e:	69b9      	ldr	r1, [r7, #24]
 8001210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0203 	and.w	r2, r3, #3
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 80b4 	beq.w	80013be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b60      	ldr	r3, [pc, #384]	@ (80013dc <HAL_GPIO_Init+0x30c>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125e:	4a5f      	ldr	r2, [pc, #380]	@ (80013dc <HAL_GPIO_Init+0x30c>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001264:	6453      	str	r3, [r2, #68]	@ 0x44
 8001266:	4b5d      	ldr	r3, [pc, #372]	@ (80013dc <HAL_GPIO_Init+0x30c>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001272:	4a5b      	ldr	r2, [pc, #364]	@ (80013e0 <HAL_GPIO_Init+0x310>)
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	220f      	movs	r2, #15
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a52      	ldr	r2, [pc, #328]	@ (80013e4 <HAL_GPIO_Init+0x314>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d02b      	beq.n	80012f6 <HAL_GPIO_Init+0x226>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a51      	ldr	r2, [pc, #324]	@ (80013e8 <HAL_GPIO_Init+0x318>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d025      	beq.n	80012f2 <HAL_GPIO_Init+0x222>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a50      	ldr	r2, [pc, #320]	@ (80013ec <HAL_GPIO_Init+0x31c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d01f      	beq.n	80012ee <HAL_GPIO_Init+0x21e>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4f      	ldr	r2, [pc, #316]	@ (80013f0 <HAL_GPIO_Init+0x320>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d019      	beq.n	80012ea <HAL_GPIO_Init+0x21a>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4e      	ldr	r2, [pc, #312]	@ (80013f4 <HAL_GPIO_Init+0x324>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d013      	beq.n	80012e6 <HAL_GPIO_Init+0x216>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4d      	ldr	r2, [pc, #308]	@ (80013f8 <HAL_GPIO_Init+0x328>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d00d      	beq.n	80012e2 <HAL_GPIO_Init+0x212>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4c      	ldr	r2, [pc, #304]	@ (80013fc <HAL_GPIO_Init+0x32c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d007      	beq.n	80012de <HAL_GPIO_Init+0x20e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001400 <HAL_GPIO_Init+0x330>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d101      	bne.n	80012da <HAL_GPIO_Init+0x20a>
 80012d6:	2307      	movs	r3, #7
 80012d8:	e00e      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012da:	2308      	movs	r3, #8
 80012dc:	e00c      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012de:	2306      	movs	r3, #6
 80012e0:	e00a      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012e2:	2305      	movs	r3, #5
 80012e4:	e008      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012e6:	2304      	movs	r3, #4
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012ea:	2303      	movs	r3, #3
 80012ec:	e004      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e002      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012f6:	2300      	movs	r3, #0
 80012f8:	69fa      	ldr	r2, [r7, #28]
 80012fa:	f002 0203 	and.w	r2, r2, #3
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	4093      	lsls	r3, r2
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001308:	4935      	ldr	r1, [pc, #212]	@ (80013e0 <HAL_GPIO_Init+0x310>)
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001316:	4b3b      	ldr	r3, [pc, #236]	@ (8001404 <HAL_GPIO_Init+0x334>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133a:	4a32      	ldr	r2, [pc, #200]	@ (8001404 <HAL_GPIO_Init+0x334>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001340:	4b30      	ldr	r3, [pc, #192]	@ (8001404 <HAL_GPIO_Init+0x334>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001364:	4a27      	ldr	r2, [pc, #156]	@ (8001404 <HAL_GPIO_Init+0x334>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136a:	4b26      	ldr	r3, [pc, #152]	@ (8001404 <HAL_GPIO_Init+0x334>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800138e:	4a1d      	ldr	r2, [pc, #116]	@ (8001404 <HAL_GPIO_Init+0x334>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001394:	4b1b      	ldr	r3, [pc, #108]	@ (8001404 <HAL_GPIO_Init+0x334>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b8:	4a12      	ldr	r2, [pc, #72]	@ (8001404 <HAL_GPIO_Init+0x334>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3301      	adds	r3, #1
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	2b0f      	cmp	r3, #15
 80013c8:	f67f ae90 	bls.w	80010ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3724      	adds	r7, #36	@ 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40013800 	.word	0x40013800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40021400 	.word	0x40021400
 80013fc:	40021800 	.word	0x40021800
 8001400:	40021c00 	.word	0x40021c00
 8001404:	40013c00 	.word	0x40013c00

08001408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
 8001414:	4613      	mov	r3, r2
 8001416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001418:	787b      	ldrb	r3, [r7, #1]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001424:	e003      	b.n	800142e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001426:	887b      	ldrh	r3, [r7, #2]
 8001428:	041a      	lsls	r2, r3, #16
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	619a      	str	r2, [r3, #24]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e267      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d075      	beq.n	8001546 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800145a:	4b88      	ldr	r3, [pc, #544]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	2b04      	cmp	r3, #4
 8001464:	d00c      	beq.n	8001480 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001466:	4b85      	ldr	r3, [pc, #532]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800146e:	2b08      	cmp	r3, #8
 8001470:	d112      	bne.n	8001498 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001472:	4b82      	ldr	r3, [pc, #520]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800147a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800147e:	d10b      	bne.n	8001498 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	4b7e      	ldr	r3, [pc, #504]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d05b      	beq.n	8001544 <HAL_RCC_OscConfig+0x108>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d157      	bne.n	8001544 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e242      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a0:	d106      	bne.n	80014b0 <HAL_RCC_OscConfig+0x74>
 80014a2:	4b76      	ldr	r3, [pc, #472]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a75      	ldr	r2, [pc, #468]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e01d      	b.n	80014ec <HAL_RCC_OscConfig+0xb0>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014b8:	d10c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x98>
 80014ba:	4b70      	ldr	r3, [pc, #448]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a6f      	ldr	r2, [pc, #444]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80014c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b6d      	ldr	r3, [pc, #436]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a6c      	ldr	r2, [pc, #432]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e00b      	b.n	80014ec <HAL_RCC_OscConfig+0xb0>
 80014d4:	4b69      	ldr	r3, [pc, #420]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a68      	ldr	r2, [pc, #416]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80014da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b66      	ldr	r3, [pc, #408]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a65      	ldr	r2, [pc, #404]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80014e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d013      	beq.n	800151c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fcac 	bl	8000e50 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fca8 	bl	8000e50 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	@ 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e207      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	4b5b      	ldr	r3, [pc, #364]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0xc0>
 800151a:	e014      	b.n	8001546 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fc98 	bl	8000e50 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fc94 	bl	8000e50 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	@ 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e1f3      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001536:	4b51      	ldr	r3, [pc, #324]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0xe8>
 8001542:	e000      	b.n	8001546 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d063      	beq.n	800161a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001552:	4b4a      	ldr	r3, [pc, #296]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00b      	beq.n	8001576 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800155e:	4b47      	ldr	r3, [pc, #284]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001566:	2b08      	cmp	r3, #8
 8001568:	d11c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800156a:	4b44      	ldr	r3, [pc, #272]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d116      	bne.n	80015a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001576:	4b41      	ldr	r3, [pc, #260]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d005      	beq.n	800158e <HAL_RCC_OscConfig+0x152>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d001      	beq.n	800158e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e1c7      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158e:	4b3b      	ldr	r3, [pc, #236]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4937      	ldr	r1, [pc, #220]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a2:	e03a      	b.n	800161a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d020      	beq.n	80015ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ac:	4b34      	ldr	r3, [pc, #208]	@ (8001680 <HAL_RCC_OscConfig+0x244>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b2:	f7ff fc4d 	bl	8000e50 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ba:	f7ff fc49 	bl	8000e50 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e1a8      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015cc:	4b2b      	ldr	r3, [pc, #172]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d8:	4b28      	ldr	r3, [pc, #160]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4925      	ldr	r1, [pc, #148]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
 80015ec:	e015      	b.n	800161a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ee:	4b24      	ldr	r3, [pc, #144]	@ (8001680 <HAL_RCC_OscConfig+0x244>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f4:	f7ff fc2c 	bl	8000e50 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015fc:	f7ff fc28 	bl	8000e50 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e187      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160e:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d036      	beq.n	8001694 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d016      	beq.n	800165c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162e:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <HAL_RCC_OscConfig+0x248>)
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001634:	f7ff fc0c 	bl	8000e50 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800163c:	f7ff fc08 	bl	8000e50 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e167      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164e:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <HAL_RCC_OscConfig+0x240>)
 8001650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x200>
 800165a:	e01b      	b.n	8001694 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165c:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <HAL_RCC_OscConfig+0x248>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001662:	f7ff fbf5 	bl	8000e50 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001668:	e00e      	b.n	8001688 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800166a:	f7ff fbf1 	bl	8000e50 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d907      	bls.n	8001688 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e150      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
 800167c:	40023800 	.word	0x40023800
 8001680:	42470000 	.word	0x42470000
 8001684:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001688:	4b88      	ldr	r3, [pc, #544]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 800168a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1ea      	bne.n	800166a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 8097 	beq.w	80017d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016a6:	4b81      	ldr	r3, [pc, #516]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10f      	bne.n	80016d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	4b7d      	ldr	r3, [pc, #500]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	4a7c      	ldr	r2, [pc, #496]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c2:	4b7a      	ldr	r3, [pc, #488]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ce:	2301      	movs	r3, #1
 80016d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d2:	4b77      	ldr	r3, [pc, #476]	@ (80018b0 <HAL_RCC_OscConfig+0x474>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d118      	bne.n	8001710 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016de:	4b74      	ldr	r3, [pc, #464]	@ (80018b0 <HAL_RCC_OscConfig+0x474>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a73      	ldr	r2, [pc, #460]	@ (80018b0 <HAL_RCC_OscConfig+0x474>)
 80016e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ea:	f7ff fbb1 	bl	8000e50 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f2:	f7ff fbad 	bl	8000e50 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e10c      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001704:	4b6a      	ldr	r3, [pc, #424]	@ (80018b0 <HAL_RCC_OscConfig+0x474>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f0      	beq.n	80016f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d106      	bne.n	8001726 <HAL_RCC_OscConfig+0x2ea>
 8001718:	4b64      	ldr	r3, [pc, #400]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 800171a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800171c:	4a63      	ldr	r2, [pc, #396]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6713      	str	r3, [r2, #112]	@ 0x70
 8001724:	e01c      	b.n	8001760 <HAL_RCC_OscConfig+0x324>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b05      	cmp	r3, #5
 800172c:	d10c      	bne.n	8001748 <HAL_RCC_OscConfig+0x30c>
 800172e:	4b5f      	ldr	r3, [pc, #380]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 8001730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001732:	4a5e      	ldr	r2, [pc, #376]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	6713      	str	r3, [r2, #112]	@ 0x70
 800173a:	4b5c      	ldr	r3, [pc, #368]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173e:	4a5b      	ldr	r2, [pc, #364]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6713      	str	r3, [r2, #112]	@ 0x70
 8001746:	e00b      	b.n	8001760 <HAL_RCC_OscConfig+0x324>
 8001748:	4b58      	ldr	r3, [pc, #352]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 800174a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174c:	4a57      	ldr	r2, [pc, #348]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	6713      	str	r3, [r2, #112]	@ 0x70
 8001754:	4b55      	ldr	r3, [pc, #340]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 8001756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001758:	4a54      	ldr	r2, [pc, #336]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 800175a:	f023 0304 	bic.w	r3, r3, #4
 800175e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d015      	beq.n	8001794 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001768:	f7ff fb72 	bl	8000e50 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176e:	e00a      	b.n	8001786 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001770:	f7ff fb6e 	bl	8000e50 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e0cb      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001786:	4b49      	ldr	r3, [pc, #292]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 8001788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0ee      	beq.n	8001770 <HAL_RCC_OscConfig+0x334>
 8001792:	e014      	b.n	80017be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001794:	f7ff fb5c 	bl	8000e50 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179a:	e00a      	b.n	80017b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179c:	f7ff fb58 	bl	8000e50 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e0b5      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b2:	4b3e      	ldr	r3, [pc, #248]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1ee      	bne.n	800179c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017be:	7dfb      	ldrb	r3, [r7, #23]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d105      	bne.n	80017d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c4:	4b39      	ldr	r3, [pc, #228]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c8:	4a38      	ldr	r2, [pc, #224]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 80017ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80a1 	beq.w	800191c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017da:	4b34      	ldr	r3, [pc, #208]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 030c 	and.w	r3, r3, #12
 80017e2:	2b08      	cmp	r3, #8
 80017e4:	d05c      	beq.n	80018a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d141      	bne.n	8001872 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ee:	4b31      	ldr	r3, [pc, #196]	@ (80018b4 <HAL_RCC_OscConfig+0x478>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fb2c 	bl	8000e50 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff fb28 	bl	8000e50 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e087      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180e:	4b27      	ldr	r3, [pc, #156]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69da      	ldr	r2, [r3, #28]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001828:	019b      	lsls	r3, r3, #6
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001830:	085b      	lsrs	r3, r3, #1
 8001832:	3b01      	subs	r3, #1
 8001834:	041b      	lsls	r3, r3, #16
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183c:	061b      	lsls	r3, r3, #24
 800183e:	491b      	ldr	r1, [pc, #108]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001844:	4b1b      	ldr	r3, [pc, #108]	@ (80018b4 <HAL_RCC_OscConfig+0x478>)
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7ff fb01 	bl	8000e50 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001852:	f7ff fafd 	bl	8000e50 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e05c      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001864:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0x416>
 8001870:	e054      	b.n	800191c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <HAL_RCC_OscConfig+0x478>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff faea 	bl	8000e50 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001880:	f7ff fae6 	bl	8000e50 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e045      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001892:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_RCC_OscConfig+0x470>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x444>
 800189e:	e03d      	b.n	800191c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d107      	bne.n	80018b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e038      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40007000 	.word	0x40007000
 80018b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001928 <HAL_RCC_OscConfig+0x4ec>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d028      	beq.n	8001918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d121      	bne.n	8001918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d11a      	bne.n	8001918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018e8:	4013      	ands	r3, r2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d111      	bne.n	8001918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fe:	085b      	lsrs	r3, r3, #1
 8001900:	3b01      	subs	r3, #1
 8001902:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d107      	bne.n	8001918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001912:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40023800 	.word	0x40023800

0800192c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0cc      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b68      	ldr	r3, [pc, #416]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d90c      	bls.n	8001968 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b65      	ldr	r3, [pc, #404]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001956:	4b63      	ldr	r3, [pc, #396]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d001      	beq.n	8001968 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0b8      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d020      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001980:	4b59      	ldr	r3, [pc, #356]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4a58      	ldr	r2, [pc, #352]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800198a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001998:	4b53      	ldr	r3, [pc, #332]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4a52      	ldr	r2, [pc, #328]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a4:	4b50      	ldr	r3, [pc, #320]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	494d      	ldr	r1, [pc, #308]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d044      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ca:	4b47      	ldr	r3, [pc, #284]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d119      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e07f      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d003      	beq.n	80019ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ea:	4b3f      	ldr	r3, [pc, #252]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d109      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e06f      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fa:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e067      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0a:	4b37      	ldr	r3, [pc, #220]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f023 0203 	bic.w	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4934      	ldr	r1, [pc, #208]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a1c:	f7ff fa18 	bl	8000e50 <HAL_GetTick>
 8001a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a24:	f7ff fa14 	bl	8000e50 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e04f      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 020c 	and.w	r2, r3, #12
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d1eb      	bne.n	8001a24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b25      	ldr	r3, [pc, #148]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d20c      	bcs.n	8001a74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b22      	ldr	r3, [pc, #136]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a62:	4b20      	ldr	r3, [pc, #128]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e032      	b.n	8001ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d008      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a80:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4916      	ldr	r1, [pc, #88]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d009      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	490e      	ldr	r1, [pc, #56]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ab2:	f000 f821 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	490a      	ldr	r1, [pc, #40]	@ (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001ac4:	5ccb      	ldrb	r3, [r1, r3]
 8001ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aca:	4a09      	ldr	r2, [pc, #36]	@ (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ace:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff f978 	bl	8000dc8 <HAL_InitTick>

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023c00 	.word	0x40023c00
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	08002834 	.word	0x08002834
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20000004 	.word	0x20000004

08001af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001afc:	b094      	sub	sp, #80	@ 0x50
 8001afe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b04:	2300      	movs	r3, #0
 8001b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b08:	2300      	movs	r3, #0
 8001b0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b10:	4b79      	ldr	r3, [pc, #484]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	d00d      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x40>
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	f200 80e1 	bhi.w	8001ce4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <HAL_RCC_GetSysClockFreq+0x34>
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d003      	beq.n	8001b32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b2a:	e0db      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b2c:	4b73      	ldr	r3, [pc, #460]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001b30:	e0db      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b32:	4b73      	ldr	r3, [pc, #460]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b36:	e0d8      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b38:	4b6f      	ldr	r3, [pc, #444]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b40:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b42:	4b6d      	ldr	r3, [pc, #436]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d063      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4e:	4b6a      	ldr	r3, [pc, #424]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	099b      	lsrs	r3, r3, #6
 8001b54:	2200      	movs	r2, #0
 8001b56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b60:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b62:	2300      	movs	r3, #0
 8001b64:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b6a:	4622      	mov	r2, r4
 8001b6c:	462b      	mov	r3, r5
 8001b6e:	f04f 0000 	mov.w	r0, #0
 8001b72:	f04f 0100 	mov.w	r1, #0
 8001b76:	0159      	lsls	r1, r3, #5
 8001b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b7c:	0150      	lsls	r0, r2, #5
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4621      	mov	r1, r4
 8001b84:	1a51      	subs	r1, r2, r1
 8001b86:	6139      	str	r1, [r7, #16]
 8001b88:	4629      	mov	r1, r5
 8001b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b9c:	4659      	mov	r1, fp
 8001b9e:	018b      	lsls	r3, r1, #6
 8001ba0:	4651      	mov	r1, sl
 8001ba2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ba6:	4651      	mov	r1, sl
 8001ba8:	018a      	lsls	r2, r1, #6
 8001baa:	4651      	mov	r1, sl
 8001bac:	ebb2 0801 	subs.w	r8, r2, r1
 8001bb0:	4659      	mov	r1, fp
 8001bb2:	eb63 0901 	sbc.w	r9, r3, r1
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bca:	4690      	mov	r8, r2
 8001bcc:	4699      	mov	r9, r3
 8001bce:	4623      	mov	r3, r4
 8001bd0:	eb18 0303 	adds.w	r3, r8, r3
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	462b      	mov	r3, r5
 8001bd8:	eb49 0303 	adc.w	r3, r9, r3
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bea:	4629      	mov	r1, r5
 8001bec:	024b      	lsls	r3, r1, #9
 8001bee:	4621      	mov	r1, r4
 8001bf0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	024a      	lsls	r2, r1, #9
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bfe:	2200      	movs	r2, #0
 8001c00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c08:	f7fe fade 	bl	80001c8 <__aeabi_uldivmod>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4613      	mov	r3, r2
 8001c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c14:	e058      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c16:	4b38      	ldr	r3, [pc, #224]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	099b      	lsrs	r3, r3, #6
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	4611      	mov	r1, r2
 8001c22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c26:	623b      	str	r3, [r7, #32]
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c30:	4642      	mov	r2, r8
 8001c32:	464b      	mov	r3, r9
 8001c34:	f04f 0000 	mov.w	r0, #0
 8001c38:	f04f 0100 	mov.w	r1, #0
 8001c3c:	0159      	lsls	r1, r3, #5
 8001c3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c42:	0150      	lsls	r0, r2, #5
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4641      	mov	r1, r8
 8001c4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c4e:	4649      	mov	r1, r9
 8001c50:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c68:	ebb2 040a 	subs.w	r4, r2, sl
 8001c6c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	00eb      	lsls	r3, r5, #3
 8001c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c7e:	00e2      	lsls	r2, r4, #3
 8001c80:	4614      	mov	r4, r2
 8001c82:	461d      	mov	r5, r3
 8001c84:	4643      	mov	r3, r8
 8001c86:	18e3      	adds	r3, r4, r3
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	464b      	mov	r3, r9
 8001c8c:	eb45 0303 	adc.w	r3, r5, r3
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	028b      	lsls	r3, r1, #10
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ca8:	4621      	mov	r1, r4
 8001caa:	028a      	lsls	r2, r1, #10
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
 8001cb6:	61fa      	str	r2, [r7, #28]
 8001cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cbc:	f7fe fa84 	bl	80001c8 <__aeabi_uldivmod>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	0c1b      	lsrs	r3, r3, #16
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001cd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ce2:	e002      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ce4:	4b05      	ldr	r3, [pc, #20]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3750      	adds	r7, #80	@ 0x50
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	00f42400 	.word	0x00f42400
 8001d00:	007a1200 	.word	0x007a1200

08001d04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e07b      	b.n	8001e0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d108      	bne.n	8001d30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d26:	d009      	beq.n	8001d3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
 8001d2e:	e005      	b.n	8001d3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7fe ff44 	bl	8000be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dc0:	ea42 0103 	orr.w	r1, r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	0c1b      	lsrs	r3, r3, #16
 8001dda:	f003 0104 	and.w	r1, r3, #4
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de2:	f003 0210 	and.w	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	69da      	ldr	r2, [r3, #28]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b088      	sub	sp, #32
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	603b      	str	r3, [r7, #0]
 8001e22:	4613      	mov	r3, r2
 8001e24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_SPI_Transmit+0x22>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e12d      	b.n	8002094 <HAL_SPI_Transmit+0x27e>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e40:	f7ff f806 	bl	8000e50 <HAL_GetTick>
 8001e44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d002      	beq.n	8001e5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e56:	2302      	movs	r3, #2
 8001e58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e5a:	e116      	b.n	800208a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <HAL_SPI_Transmit+0x52>
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d102      	bne.n	8001e6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e6c:	e10d      	b.n	800208a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2203      	movs	r2, #3
 8001e72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	88fa      	ldrh	r2, [r7, #6]
 8001e86:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	88fa      	ldrh	r2, [r7, #6]
 8001e8c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001eb4:	d10f      	bne.n	8001ed6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ec4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ed4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ee0:	2b40      	cmp	r3, #64	@ 0x40
 8001ee2:	d007      	beq.n	8001ef4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ef2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001efc:	d14f      	bne.n	8001f9e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <HAL_SPI_Transmit+0xf6>
 8001f06:	8afb      	ldrh	r3, [r7, #22]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d142      	bne.n	8001f92 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f10:	881a      	ldrh	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1c:	1c9a      	adds	r2, r3, #2
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f30:	e02f      	b.n	8001f92 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d112      	bne.n	8001f66 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f44:	881a      	ldrh	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f50:	1c9a      	adds	r2, r3, #2
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001f64:	e015      	b.n	8001f92 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f66:	f7fe ff73 	bl	8000e50 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d803      	bhi.n	8001f7e <HAL_SPI_Transmit+0x168>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7c:	d102      	bne.n	8001f84 <HAL_SPI_Transmit+0x16e>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d106      	bne.n	8001f92 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8001f90:	e07b      	b.n	800208a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1ca      	bne.n	8001f32 <HAL_SPI_Transmit+0x11c>
 8001f9c:	e050      	b.n	8002040 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <HAL_SPI_Transmit+0x196>
 8001fa6:	8afb      	ldrh	r3, [r7, #22]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d144      	bne.n	8002036 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	330c      	adds	r3, #12
 8001fb6:	7812      	ldrb	r2, [r2, #0]
 8001fb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	1c5a      	adds	r2, r3, #1
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001fd2:	e030      	b.n	8002036 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d113      	bne.n	800200a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	330c      	adds	r3, #12
 8001fec:	7812      	ldrb	r2, [r2, #0]
 8001fee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002008:	e015      	b.n	8002036 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800200a:	f7fe ff21 	bl	8000e50 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d803      	bhi.n	8002022 <HAL_SPI_Transmit+0x20c>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002020:	d102      	bne.n	8002028 <HAL_SPI_Transmit+0x212>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d106      	bne.n	8002036 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002034:	e029      	b.n	800208a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800203a:	b29b      	uxth	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1c9      	bne.n	8001fd4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	6839      	ldr	r1, [r7, #0]
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 fb69 	bl	800271c <SPI_EndRxTxTransaction>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2220      	movs	r2, #32
 8002054:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10a      	bne.n	8002074 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	77fb      	strb	r3, [r7, #31]
 8002080:	e003      	b.n	800208a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002092:	7ffb      	ldrb	r3, [r7, #31]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3720      	adds	r7, #32
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08c      	sub	sp, #48	@ 0x30
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80020aa:	2301      	movs	r3, #1
 80020ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HAL_SPI_TransmitReceive+0x26>
 80020be:	2302      	movs	r3, #2
 80020c0:	e198      	b.n	80023f4 <HAL_SPI_TransmitReceive+0x358>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020ca:	f7fe fec1 	bl	8000e50 <HAL_GetTick>
 80020ce:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80020e0:	887b      	ldrh	r3, [r7, #2]
 80020e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80020e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d00f      	beq.n	800210c <HAL_SPI_TransmitReceive+0x70>
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020f2:	d107      	bne.n	8002104 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d103      	bne.n	8002104 <HAL_SPI_TransmitReceive+0x68>
 80020fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002100:	2b04      	cmp	r3, #4
 8002102:	d003      	beq.n	800210c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002104:	2302      	movs	r3, #2
 8002106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800210a:	e16d      	b.n	80023e8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_SPI_TransmitReceive+0x82>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_SPI_TransmitReceive+0x82>
 8002118:	887b      	ldrh	r3, [r7, #2]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d103      	bne.n	8002126 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002124:	e160      	b.n	80023e8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b04      	cmp	r3, #4
 8002130:	d003      	beq.n	800213a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2205      	movs	r2, #5
 8002136:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	887a      	ldrh	r2, [r7, #2]
 800214a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	887a      	ldrh	r2, [r7, #2]
 8002162:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800217a:	2b40      	cmp	r3, #64	@ 0x40
 800217c:	d007      	beq.n	800218e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002196:	d17c      	bne.n	8002292 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <HAL_SPI_TransmitReceive+0x10a>
 80021a0:	8b7b      	ldrh	r3, [r7, #26]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d16a      	bne.n	800227c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	881a      	ldrh	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	1c9a      	adds	r2, r3, #2
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021ca:	e057      	b.n	800227c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d11b      	bne.n	8002212 <HAL_SPI_TransmitReceive+0x176>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021de:	b29b      	uxth	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d016      	beq.n	8002212 <HAL_SPI_TransmitReceive+0x176>
 80021e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d113      	bne.n	8002212 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	881a      	ldrh	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	1c9a      	adds	r2, r3, #2
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002204:	b29b      	uxth	r3, r3
 8002206:	3b01      	subs	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d119      	bne.n	8002254 <HAL_SPI_TransmitReceive+0x1b8>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002224:	b29b      	uxth	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d014      	beq.n	8002254 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002234:	b292      	uxth	r2, r2
 8002236:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800223c:	1c9a      	adds	r2, r3, #2
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002246:	b29b      	uxth	r3, r3
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002250:	2301      	movs	r3, #1
 8002252:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002254:	f7fe fdfc 	bl	8000e50 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002260:	429a      	cmp	r2, r3
 8002262:	d80b      	bhi.n	800227c <HAL_SPI_TransmitReceive+0x1e0>
 8002264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226a:	d007      	beq.n	800227c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800227a:	e0b5      	b.n	80023e8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1a2      	bne.n	80021cc <HAL_SPI_TransmitReceive+0x130>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800228a:	b29b      	uxth	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d19d      	bne.n	80021cc <HAL_SPI_TransmitReceive+0x130>
 8002290:	e080      	b.n	8002394 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_SPI_TransmitReceive+0x204>
 800229a:	8b7b      	ldrh	r3, [r7, #26]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d16f      	bne.n	8002380 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	330c      	adds	r3, #12
 80022aa:	7812      	ldrb	r2, [r2, #0]
 80022ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022bc:	b29b      	uxth	r3, r3
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022c6:	e05b      	b.n	8002380 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d11c      	bne.n	8002310 <HAL_SPI_TransmitReceive+0x274>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d017      	beq.n	8002310 <HAL_SPI_TransmitReceive+0x274>
 80022e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d114      	bne.n	8002310 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	330c      	adds	r3, #12
 80022f0:	7812      	ldrb	r2, [r2, #0]
 80022f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002302:	b29b      	uxth	r3, r3
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b01      	cmp	r3, #1
 800231c:	d119      	bne.n	8002352 <HAL_SPI_TransmitReceive+0x2b6>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002322:	b29b      	uxth	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d014      	beq.n	8002352 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800234e:	2301      	movs	r3, #1
 8002350:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002352:	f7fe fd7d 	bl	8000e50 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800235e:	429a      	cmp	r2, r3
 8002360:	d803      	bhi.n	800236a <HAL_SPI_TransmitReceive+0x2ce>
 8002362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d102      	bne.n	8002370 <HAL_SPI_TransmitReceive+0x2d4>
 800236a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800236c:	2b00      	cmp	r3, #0
 800236e:	d107      	bne.n	8002380 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800237e:	e033      	b.n	80023e8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d19e      	bne.n	80022c8 <HAL_SPI_TransmitReceive+0x22c>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800238e:	b29b      	uxth	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d199      	bne.n	80022c8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002396:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f9bf 	bl	800271c <SPI_EndRxTxTransaction>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d006      	beq.n	80023b2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2220      	movs	r2, #32
 80023ae:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80023b0:	e01a      	b.n	80023e8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10a      	bne.n	80023d0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023de:	e003      	b.n	80023e8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80023f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3730      	adds	r7, #48	@ 0x30
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10e      	bne.n	800243c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002424:	2b00      	cmp	r3, #0
 8002426:	d009      	beq.n	800243c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800242e:	2b00      	cmp	r3, #0
 8002430:	d004      	beq.n	800243c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	4798      	blx	r3
    return;
 800243a:	e0ce      	b.n	80025da <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <HAL_SPI_IRQHandler+0x5e>
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800244c:	2b00      	cmp	r3, #0
 800244e:	d004      	beq.n	800245a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	4798      	blx	r3
    return;
 8002458:	e0bf      	b.n	80025da <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10a      	bne.n	800247a <HAL_SPI_IRQHandler+0x7e>
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800246a:	2b00      	cmp	r3, #0
 800246c:	d105      	bne.n	800247a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80b0 	beq.w	80025da <HAL_SPI_IRQHandler+0x1de>
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80aa 	beq.w	80025da <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800248c:	2b00      	cmp	r3, #0
 800248e:	d023      	beq.n	80024d8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b03      	cmp	r3, #3
 800249a:	d011      	beq.n	80024c0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a0:	f043 0204 	orr.w	r2, r3, #4
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	e00b      	b.n	80024d8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024c0:	2300      	movs	r3, #0
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]
        return;
 80024d6:	e080      	b.n	80025da <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	f003 0320 	and.w	r3, r3, #32
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d014      	beq.n	800250c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e6:	f043 0201 	orr.w	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00c      	beq.n	8002530 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800251a:	f043 0208 	orr.w	r2, r3, #8
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002534:	2b00      	cmp	r3, #0
 8002536:	d04f      	beq.n	80025d8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002546:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d104      	bne.n	8002564 <HAL_SPI_IRQHandler+0x168>
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d034      	beq.n	80025ce <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0203 	bic.w	r2, r2, #3
 8002572:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002578:	2b00      	cmp	r3, #0
 800257a:	d011      	beq.n	80025a0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002580:	4a17      	ldr	r2, [pc, #92]	@ (80025e0 <HAL_SPI_IRQHandler+0x1e4>)
 8002582:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe fd7e 	bl	800108a <HAL_DMA_Abort_IT>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002598:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d016      	beq.n	80025d6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ac:	4a0c      	ldr	r2, [pc, #48]	@ (80025e0 <HAL_SPI_IRQHandler+0x1e4>)
 80025ae:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fd68 	bl	800108a <HAL_DMA_Abort_IT>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80025cc:	e003      	b.n	80025d6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7fe fb92 	bl	8000cf8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80025d4:	e000      	b.n	80025d8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80025d6:	bf00      	nop
    return;
 80025d8:	bf00      	nop
  }
}
 80025da:	3720      	adds	r7, #32
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	080025e5 	.word	0x080025e5

080025e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f7fe fb7a 	bl	8000cf8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	4613      	mov	r3, r2
 800261a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800261c:	f7fe fc18 	bl	8000e50 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	4413      	add	r3, r2
 800262a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800262c:	f7fe fc10 	bl	8000e50 <HAL_GetTick>
 8002630:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002632:	4b39      	ldr	r3, [pc, #228]	@ (8002718 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	015b      	lsls	r3, r3, #5
 8002638:	0d1b      	lsrs	r3, r3, #20
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	fb02 f303 	mul.w	r3, r2, r3
 8002640:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002642:	e054      	b.n	80026ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264a:	d050      	beq.n	80026ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800264c:	f7fe fc00 	bl	8000e50 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	429a      	cmp	r2, r3
 800265a:	d902      	bls.n	8002662 <SPI_WaitFlagStateUntilTimeout+0x56>
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d13d      	bne.n	80026de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002670:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800267a:	d111      	bne.n	80026a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002684:	d004      	beq.n	8002690 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800268e:	d107      	bne.n	80026a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800269e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026a8:	d10f      	bne.n	80026ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e017      	b.n	800270e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4013      	ands	r3, r2
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	bf0c      	ite	eq
 80026fe:	2301      	moveq	r3, #1
 8002700:	2300      	movne	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	429a      	cmp	r2, r3
 800270a:	d19b      	bne.n	8002644 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3720      	adds	r7, #32
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000000 	.word	0x20000000

0800271c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af02      	add	r7, sp, #8
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2201      	movs	r2, #1
 8002730:	2102      	movs	r1, #2
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f7ff ff6a 	bl	800260c <SPI_WaitFlagStateUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d007      	beq.n	800274e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002742:	f043 0220 	orr.w	r2, r3, #32
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e032      	b.n	80027b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800274e:	4b1b      	ldr	r3, [pc, #108]	@ (80027bc <SPI_EndRxTxTransaction+0xa0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1b      	ldr	r2, [pc, #108]	@ (80027c0 <SPI_EndRxTxTransaction+0xa4>)
 8002754:	fba2 2303 	umull	r2, r3, r2, r3
 8002758:	0d5b      	lsrs	r3, r3, #21
 800275a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800276c:	d112      	bne.n	8002794 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2200      	movs	r2, #0
 8002776:	2180      	movs	r1, #128	@ 0x80
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff ff47 	bl	800260c <SPI_WaitFlagStateUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d016      	beq.n	80027b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002788:	f043 0220 	orr.w	r2, r3, #32
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e00f      	b.n	80027b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00a      	beq.n	80027b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	3b01      	subs	r3, #1
 800279e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027aa:	2b80      	cmp	r3, #128	@ 0x80
 80027ac:	d0f2      	beq.n	8002794 <SPI_EndRxTxTransaction+0x78>
 80027ae:	e000      	b.n	80027b2 <SPI_EndRxTxTransaction+0x96>
        break;
 80027b0:	bf00      	nop
  }

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000000 	.word	0x20000000
 80027c0:	165e9f81 	.word	0x165e9f81

080027c4 <memset>:
 80027c4:	4402      	add	r2, r0
 80027c6:	4603      	mov	r3, r0
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d100      	bne.n	80027ce <memset+0xa>
 80027cc:	4770      	bx	lr
 80027ce:	f803 1b01 	strb.w	r1, [r3], #1
 80027d2:	e7f9      	b.n	80027c8 <memset+0x4>

080027d4 <__libc_init_array>:
 80027d4:	b570      	push	{r4, r5, r6, lr}
 80027d6:	4d0d      	ldr	r5, [pc, #52]	@ (800280c <__libc_init_array+0x38>)
 80027d8:	4c0d      	ldr	r4, [pc, #52]	@ (8002810 <__libc_init_array+0x3c>)
 80027da:	1b64      	subs	r4, r4, r5
 80027dc:	10a4      	asrs	r4, r4, #2
 80027de:	2600      	movs	r6, #0
 80027e0:	42a6      	cmp	r6, r4
 80027e2:	d109      	bne.n	80027f8 <__libc_init_array+0x24>
 80027e4:	4d0b      	ldr	r5, [pc, #44]	@ (8002814 <__libc_init_array+0x40>)
 80027e6:	4c0c      	ldr	r4, [pc, #48]	@ (8002818 <__libc_init_array+0x44>)
 80027e8:	f000 f818 	bl	800281c <_init>
 80027ec:	1b64      	subs	r4, r4, r5
 80027ee:	10a4      	asrs	r4, r4, #2
 80027f0:	2600      	movs	r6, #0
 80027f2:	42a6      	cmp	r6, r4
 80027f4:	d105      	bne.n	8002802 <__libc_init_array+0x2e>
 80027f6:	bd70      	pop	{r4, r5, r6, pc}
 80027f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80027fc:	4798      	blx	r3
 80027fe:	3601      	adds	r6, #1
 8002800:	e7ee      	b.n	80027e0 <__libc_init_array+0xc>
 8002802:	f855 3b04 	ldr.w	r3, [r5], #4
 8002806:	4798      	blx	r3
 8002808:	3601      	adds	r6, #1
 800280a:	e7f2      	b.n	80027f2 <__libc_init_array+0x1e>
 800280c:	0800284c 	.word	0x0800284c
 8002810:	0800284c 	.word	0x0800284c
 8002814:	0800284c 	.word	0x0800284c
 8002818:	08002850 	.word	0x08002850

0800281c <_init>:
 800281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281e:	bf00      	nop
 8002820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002822:	bc08      	pop	{r3}
 8002824:	469e      	mov	lr, r3
 8002826:	4770      	bx	lr

08002828 <_fini>:
 8002828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282a:	bf00      	nop
 800282c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282e:	bc08      	pop	{r3}
 8002830:	469e      	mov	lr, r3
 8002832:	4770      	bx	lr
